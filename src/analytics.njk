---
layout: "base.njk"
title: "Blog Analytics"
permalink: "/analytics/"
---

<div class="analytics-container">
    <h1>Blog Analytics</h1>
    
    <div class="stats-cards">
        <div class="stat-card">
            <h3>Total Posts</h3>
            <p id="totalPosts">Loading...</p>
        </div>
        <div class="stat-card">
            <h3>Total Words</h3>
            <p id="totalWords">Loading...</p>
        </div>
        <div class="stat-card">
            <h3>Average Words per Post</h3>
            <p id="avgWords">Loading...</p>
        </div>
        <div class="stat-card">
            <h3>Average Reading Time</h3>
            <p id="avgReadingTime">Loading...</p>
        </div>
    </div>

    <div class="sentiment-section">
        <h2>Sentiment Analysis</h2>
        <div class="sentiment-cards">
            <div class="stat-card">
                <h3>Average Sentiment</h3>
                <p id="avgSentiment">Loading...</p>
            </div>
            <div class="stat-card">
                <h3>Most Positive Post</h3>
                <p id="mostPositive">Loading...</p>
            </div>
            <div class="stat-card">
                <h3>Most Negative Post</h3>
                <p id="mostNegative">Loading...</p>
            </div>
        </div>
        <div class="chart-container">
            <canvas id="sentimentChart"></canvas>
        </div>
    </div>

    <div class="chart-container">
        <h2>Posts by Year</h2>
        <canvas id="yearChart"></canvas>
    </div>

    <div class="chart-container">
        <h2>Posts by Month</h2>
        <canvas id="monthChart"></canvas>
    </div>

    <div class="chart-container">
        <h2>Top Categories</h2>
        <canvas id="categoryChart"></canvas>
    </div>

    <div class="chart-container">
        <h2>Post Frequency Trend</h2>
        <canvas id="trendChart"></canvas>
    </div>

    <div class="post-lengths">
        <div class="post-length">
            <h3>Longest Post</h3>
            <p id="longestPost">Loading...</p>
        </div>
        <div class="post-length">
            <h3>Shortest Post</h3>
            <p id="shortestPost">Loading...</p>
        </div>
    </div>

    <div class="chart-container">
        <h2>Tag Cloud</h2>
        <div id="tagCloud" class="tag-cloud"></div>
    </div>

    <div class="chart-container">
        <h2>Recent Activity</h2>
        <div id="recentActivity" class="recent-activity"></div>
    </div>
</div>

<style>
.analytics-container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 2rem;
}

.stats-cards {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
    gap: 1rem;
    margin-bottom: 2rem;
}

.sentiment-section {
    margin-bottom: 2rem;
}

.sentiment-cards {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
    gap: 1rem;
    margin-bottom: 1rem;
}

.stat-card {
    background: #f5f5f5;
    padding: 1.5rem;
    border-radius: 8px;
    text-align: center;
    transition: transform 0.2s ease;
}

.stat-card:hover {
    transform: translateY(-5px);
}

.stat-card h3 {
    margin: 0;
    color: #666;
    font-size: 1rem;
}

.stat-card p {
    margin: 0.5rem 0 0;
    font-size: 2rem;
    font-weight: bold;
    color: #333;
}

.chart-container {
    background: white;
    padding: 1.5rem;
    border-radius: 8px;
    margin-bottom: 2rem;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    transition: transform 0.2s ease;
}

.chart-container:hover {
    transform: translateY(-5px);
}

.chart-container h2 {
    margin: 0 0 1rem;
    color: #333;
    font-size: 1.5rem;
}

.post-lengths {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: 1rem;
}

.post-length {
    background: #f5f5f5;
    padding: 1.5rem;
    border-radius: 8px;
    transition: transform 0.2s ease;
}

.post-length:hover {
    transform: translateY(-5px);
}

.post-length h3 {
    margin: 0;
    color: #666;
    font-size: 1rem;
}

.post-length p {
    margin: 0.5rem 0 0;
    color: #333;
}

.tag-cloud {
    display: flex;
    flex-wrap: wrap;
    gap: 0.5rem;
    padding: 1rem;
    justify-content: center;
}

.tag {
    background: #e2e8f0;
    padding: 0.5rem 1rem;
    border-radius: 20px;
    font-size: 0.9rem;
    color: #4a5568;
    transition: all 0.2s ease;
    cursor: pointer;
}

.tag:hover {
    background: #4299e1;
    color: white;
    transform: scale(1.05);
}

.recent-activity {
    display: flex;
    flex-direction: column;
    gap: 1rem;
}

.activity-item {
    display: flex;
    align-items: center;
    gap: 1rem;
    padding: 1rem;
    background: #f5f5f5;
    border-radius: 8px;
    transition: transform 0.2s ease;
}

.activity-item:hover {
    transform: translateX(10px);
}

.activity-date {
    font-size: 0.9rem;
    color: #666;
    min-width: 100px;
}

.activity-title {
    font-weight: 500;
    color: #333;
}

.activity-meta {
    font-size: 0.8rem;
    color: #666;
    margin-left: auto;
}
</style>

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>
async function loadAnalytics() {
    try {
        const response = await fetch('/assets/analytics/blog-analytics.json');
        const data = await response.json();
        
        // Update stats cards
        document.getElementById('totalPosts').textContent = data.totalPosts;
        document.getElementById('totalWords').textContent = data.totalWords.toLocaleString();
        document.getElementById('avgWords').textContent = data.averageWordsPerPost;
        
        // Calculate and display average reading time (assuming 200 words per minute)
        const avgReadingTime = Math.round(data.averageWordsPerPost / 200);
        document.getElementById('avgReadingTime').textContent = `${avgReadingTime} min`;
        
        // Update sentiment analysis
        document.getElementById('avgSentiment').textContent = data.sentimentAnalysis.averageScore;
        document.getElementById('mostPositive').textContent = 
            `${data.sentimentAnalysis.mostPositive.title} (${data.sentimentAnalysis.mostPositive.score})`;
        document.getElementById('mostNegative').textContent = 
            `${data.sentimentAnalysis.mostNegative.title} (${data.sentimentAnalysis.mostNegative.score})`;
        
        // Create sentiment chart
        new Chart(document.getElementById('sentimentChart'), {
            type: 'pie',
            data: {
                labels: ['Positive', 'Neutral', 'Negative'],
                datasets: [{
                    data: [
                        data.sentimentAnalysis.postsBySentiment.positive,
                        data.sentimentAnalysis.postsBySentiment.neutral,
                        data.sentimentAnalysis.postsBySentiment.negative
                    ],
                    backgroundColor: [
                        'rgba(75, 192, 192, 0.5)',
                        'rgba(201, 203, 207, 0.5)',
                        'rgba(255, 99, 132, 0.5)'
                    ],
                    borderColor: [
                        'rgba(75, 192, 192, 1)',
                        'rgba(201, 203, 207, 1)',
                        'rgba(255, 99, 132, 1)'
                    ],
                    borderWidth: 1
                }]
            },
            options: {
                responsive: true,
                plugins: {
                    legend: {
                        position: 'right'
                    },
                    title: {
                        display: true,
                        text: 'Posts by Sentiment'
                    }
                }
            }
        });
        
        // Update post lengths
        document.getElementById('longestPost').textContent = 
            `${data.longestPost.title} (${data.longestPost.wordCount} words)`;
        document.getElementById('shortestPost').textContent = 
            `${data.shortestPost.title} (${data.shortestPost.wordCount} words)`;
        
        // Create year chart
        new Chart(document.getElementById('yearChart'), {
            type: 'bar',
            data: {
                labels: Object.keys(data.postsByYear),
                datasets: [{
                    label: 'Posts',
                    data: Object.values(data.postsByYear),
                    backgroundColor: 'rgba(54, 162, 235, 0.5)',
                    borderColor: 'rgba(54, 162, 235, 1)',
                    borderWidth: 1
                }]
            },
            options: {
                responsive: true,
                plugins: {
                    legend: {
                        display: false
                    }
                },
                scales: {
                    y: {
                        beginAtZero: true,
                        ticks: {
                            stepSize: 1
                        }
                    }
                }
            }
        });
        
        // Create month chart
        new Chart(document.getElementById('monthChart'), {
            type: 'bar',
            data: {
                labels: Object.keys(data.postsByMonth),
                datasets: [{
                    label: 'Posts',
                    data: Object.values(data.postsByMonth),
                    backgroundColor: 'rgba(75, 192, 192, 0.5)',
                    borderColor: 'rgba(75, 192, 192, 1)',
                    borderWidth: 1
                }]
            },
            options: {
                responsive: true,
                plugins: {
                    legend: {
                        display: false
                    }
                },
                scales: {
                    y: {
                        beginAtZero: true,
                        ticks: {
                            stepSize: 1
                        }
                    }
                }
            }
        });
        
        // Create category chart (top 10 categories)
        const topCategories = Object.entries(data.postsByCategory)
            .sort(([,a], [,b]) => b - a)
            .slice(0, 10);
            
        new Chart(document.getElementById('categoryChart'), {
            type: 'doughnut',
            data: {
                labels: topCategories.map(([category]) => category),
                datasets: [{
                    data: topCategories.map(([,count]) => count),
                    backgroundColor: [
                        'rgba(255, 99, 132, 0.5)',
                        'rgba(54, 162, 235, 0.5)',
                        'rgba(255, 206, 86, 0.5)',
                        'rgba(75, 192, 192, 0.5)',
                        'rgba(153, 102, 255, 0.5)',
                        'rgba(255, 159, 64, 0.5)',
                        'rgba(199, 199, 199, 0.5)',
                        'rgba(83, 102, 255, 0.5)',
                        'rgba(40, 159, 64, 0.5)',
                        'rgba(210, 199, 199, 0.5)'
                    ],
                    borderColor: [
                        'rgba(255, 99, 132, 1)',
                        'rgba(54, 162, 235, 1)',
                        'rgba(255, 206, 86, 1)',
                        'rgba(75, 192, 192, 1)',
                        'rgba(153, 102, 255, 1)',
                        'rgba(255, 159, 64, 1)',
                        'rgba(199, 199, 199, 1)',
                        'rgba(83, 102, 255, 1)',
                        'rgba(40, 159, 64, 1)',
                        'rgba(210, 199, 199, 1)'
                    ],
                    borderWidth: 1
                }]
            },
            options: {
                responsive: true,
                plugins: {
                    legend: {
                        position: 'right'
                    }
                }
            }
        });

        // Create trend chart (posts over time)
        const years = Object.keys(data.postsByYear).sort();
        const monthlyData = {};
        years.forEach(year => {
            for (let month = 1; month <= 12; month++) {
                const date = new Date(year, month - 1);
                const monthName = date.toLocaleString('default', { month: 'long' });
                monthlyData[`${year}-${month}`] = data.postsByMonth[monthName] || 0;
            }
        });

        new Chart(document.getElementById('trendChart'), {
            type: 'line',
            data: {
                labels: Object.keys(monthlyData),
                datasets: [{
                    label: 'Posts',
                    data: Object.values(monthlyData),
                    borderColor: 'rgba(75, 192, 192, 1)',
                    tension: 0.1,
                    fill: false
                }]
            },
            options: {
                responsive: true,
                plugins: {
                    legend: {
                        display: false
                    }
                },
                scales: {
                    y: {
                        beginAtZero: true,
                        ticks: {
                            stepSize: 1
                        }
                    }
                }
            }
        });

        // Create tag cloud
        const tagCloud = document.getElementById('tagCloud');
        data.tags.forEach(tag => {
            const tagElement = document.createElement('span');
            tagElement.className = 'tag';
            tagElement.textContent = tag;
            tagElement.style.fontSize = `${Math.random() * 0.5 + 0.8}rem`;
            tagCloud.appendChild(tagElement);
        });

        // Display recent activity
        const recentActivity = document.getElementById('recentActivity');
        const recentPosts = Object.entries(data.postsByYear)
            .sort(([a], [b]) => b - a)
            .slice(0, 5)
            .forEach(([year, count]) => {
                const activityItem = document.createElement('div');
                activityItem.className = 'activity-item';
                activityItem.innerHTML = `
                    <span class="activity-date">${year}</span>
                    <span class="activity-title">${count} posts published</span>
                    <span class="activity-meta">${data.postsByMonth[year] || 0} this month</span>
                `;
                recentActivity.appendChild(activityItem);
            });
        
    } catch (error) {
        console.error('Error loading analytics:', error);
    }
}

loadAnalytics();
</script> 